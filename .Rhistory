q()
install.packages("C:\Users\sgrasso\OneDrive - ARPA della Lombardia\RASDAMAN\prove_R\CubeR-mattia6690-prova.zip", repos = NULL, type = "source")
install.packages("C:\\Users\\sgrasso\\OneDrive - ARPA della Lombardia\\RASDAMAN\\prove_R\\CubeR-mattia6690-prova.zip", repos = NULL, type = "source")
library(devtools)
install.packages("C:\\Users\\sgrasso\\OneDrive - ARPA della Lombardia\\RASDAMAN\\prove_R\\CubeR-mattia6690-prova.zip", repos = NULL, type = "source")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/CubeR-mattia6690-prova.zip", repos = NULL, type = "win.binary")
install.packages("C:\\Users\\sgrasso\\OneDrive - ARPA della Lombardia\\RASDAMAN\\prove_R\\CubeR-mattia6690-prova.zip", repos = NULL, type = "source")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "source")
library(Rtools)
devtools::find_rtools()
setRepositories(addURLs = c(CRANxtras = "https://cran.r-project.org/bin/windows/Rtools/"))
5
setRepositories(addURLs = c(CRANxtras = "https://cran.r-project.org/bin/windows/"))
devtools::find_rtools()
find.package("devtools")
install.packages("devtools")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
library(devtools)
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
library(Rtools)
find_rtools()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
library(`CubeR-master`)
library(`CubeR`)
ptm<-proc.time()
coverages<-getCapability()
coverages
detach("package:CubeR", unload = TRUE)
library(CubeR)
remove.packages("CubeR", lib="~/R/win-library/3.6")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
library(`CubeR`)
ptm<-proc.time()
coverages<-getCapability()
library(`CubeR-master`)
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR.zip", repos = NULL, type = "win.binary")
remove.packages("CubeR", lib="~/R/win-library/3.6")
remove.packages("CubeR")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR.zip", repos = NULL, type = "win.binary")
library(CubeR)
library(devtools)
devtools::install_git("https://github.com/ARPASMR/myCubeR")
devtools::install_git("https://github.com/ARPASMR/myCubeR")
detach("package:CubeR", unload = TRUE)
changer(C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR, myCubeR, check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
changer("C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR", myCubeR, check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
install.packages("changer")
library(changer)
library("changer")
changer("C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR", myCubeR, check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
tempdir()
pathdir()
dirpath()
path()
path
libPaths()
changer("C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR", new_name="myCubeR", check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
library("myCubeR")
library("CubeR")
changer("C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR", new_name="myCubeR", check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
library("myCubeR")
library("myCubeR")
library(CubeR)
remove.packages("CubeR", lib="~/R/win-library/3.6")
library(CubeR)
detach("package:CubeR", unload = TRUE)
remove.packages("CubeR", lib="~/R/win-library/3.6")
library(devtools)
devtools::install_github("ARPASMR/myCubeR")
coverages<-getCapability()
coverage<-getCapability()[1]
library(myCubeR)
coverages<-getCapability()
coverage<-getCapability()[1]
formato="text/csv"
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-10-01")], "text/csv")'
WPCS_query(proper_query=query, formato=formato, filename=filename, query_url=NULL)
formato="image/png"
query='for c in (rh_ana) return encode(c[ansi("2020-10-01")], "image/png")'
filename="C:\\Users\\sgrasso\\Desktop\\rh_ana.png"
WPCS_query(proper_query=query, formato=formato, filename=filename, query_url=NULL)
formato="image/tiff"
query='for c in (rh_ana) return encode(c[ansi("2020-10-01")], "image/tiff")'
filename="C:\\Users\\sgrasso\\Desktop\\rh_ana.tif"
WPCS_query(proper_query=query, formato=formato, filename=filename, query_url=NULL)
coords<-c("515200", "5037430") %>% as.numeric
slice_E <- as.character(c(coords[1]-10000, coords[1]+10000))
slice_N <- as.character(c(coords[2]-10000, coords[2]+10000))
dataa="2020-10-01"
outfile="C:\\Users\\sgrasso\\Desktop\\prova_rh_ana.tiff"
library(xml2)
library(stringr)
library(myCubeR)
library(magrittr)
library(httr)
library(tiff)
coords<-c("515200", "5037430") %>% as.numeric
slice_E <- as.character(c(coords[1]-10000, coords[1]+10000))
slice_N <- as.character(c(coords[2]-10000, coords[2]+10000))
dataa="2020-10-01"
outfile="C:\\Users\\sgrasso\\Desktop\\prova_rh_ana.tiff"
image_from_coverage(coverage, slice_E, slice_N, DATA=dataa, res_eff=1, format="tiff", bands=NULL,filename=outfile, query_url=NULL)
coverage=getCapability()[1]
coverage
image_from_coverage(coverage, slice_E, slice_N, DATA=dataa, res_eff=1, format="tiff", bands=NULL,filename=outfile, query_url=NULL)
filename="C:\\Users\\sgrasso\\Desktop\\filepng.png"
require(png)
img<-readPNG(filename)
plot(1:10,ty="n")
rasterImage(img,2,2,4,4)
query='for c in (rh_ana) return encode(c[ansi("2020-10-01")], "image/jpeg")'
filename="C:\\Users\\sgrasso\\Desktop\\filepng.jpeg"
WPCS_query(proper_query=query, ext_format="jpeg", filename=filename, query_url=NULL)
remove.packages("myCubeR", lib="~/R/win-library/3.6")
library(devtools)
devtools::install_github("ARPASMR/myCubeR@HEAD")
library(myCubeR)
coverages=getCapability()
coverages=getCapability()
coverages
coverage="tm2_ana"
tm2_ana=coverage
temp_ext=coverage_get_temporal_extent(desc_url=NULL, coverage)
temp_ext
temp_ext=coverage_get_temporal_extent(desc_url=NULL, coverage)
temp_ext=coverage_get_temporal_extent(coverage=coverage)
coverage_get_temporal_extent <- function(desc_url=NULL, coverage)
"""
coverage_get_temporal_extent(desc_url=NULL, coverage)
desc_url<-createWCS_URLs(type="Meta")
desc_url
coverage
t_xml = xml2::read_xml(paste0(desc_url,coverage))
library(xml2)
temp_ext=coverage_get_temporal_extent(coverage=coverage)
desc_xml = xml2::read_xml(paste0(desc_url,coverage))
library(myCubeR)
temp_ext=coverage_get_temporal_extent(coverage=coverage)
coverages<-getCapability()
axes<-coverage_get_coordsys(coverage = coverage)
import(httr)
import(raster)
import(tiff)
import(xml2)
importFrom(grDevices,rainbow)
importFrom(magrittr,"%>%")
importFrom(raster,aggregate)
importFrom(raster,extent)
importFrom(raster,raster)
importFrom(raster,stack)
importFrom(raster,writeRaster)
importFrom(stringr,str_replace_all)
importFrom(stringr,str_split)
importFrom(urltools,url_encode)
importFrom(xml2,read_xml)
importFrom(xml2,xml_children)
importFrom(xml2,xml_find_all)
importFrom(xml2,xml_text)
library(myCubeR)
library(xml2)
#library(RCurl)
library(httr)
library(raster)
#library(tiff)
axes<-coverage_get_coordsys(coverage = coverage)
remove.packages("myCubeR", lib="~/R/win-library/3.6")
devtools::install_github("ARPASMR/myCubeR@HEAD")
library(myCubeR)
coverages=getCapability()
coverages=getCapability()
coverage="tm2_ana"
temp_ext=coverage_get_temporal_extent(desc_url=NULL, coverage)
axes<-coverage_get_coordsys(coverage = coverage)
library(xml2)
#library(RCurl)
library(httr)
library(raster)
axes<-coverage_get_coordsys(coverage = coverage)
library(RCurl)
axes<-coverage_get_coordsys(coverage = coverage)
library(magrittr)
axes<-coverage_get_coordsys(coverage = coverage)
library(xml2)
library(stringr)
library(myCubeR)
library(magrittr)
library(httr)
axes<-coverage_get_coordsys(coverage = coverage)
createWCS_URLs<-function(url=NULL,type){
if(is.null(url))url = "http://10.10.0.28:8081/rasdaman/ows"
urlsmall<-str_split(url,"/")[[1]]
urlsmall<-paste(urlsmall[1:3],"/",collapse = "") %>% str_replace_all(.," ","")
if(type=="Meta") url2<-paste0(url,"?SERVICE=WCS&VERSION=2.0.1&REQUEST=DescribeCoverage&COVERAGEID=")
if(type=="Get") url2<-paste0(url,"?SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage&COVERAGEID=")
if(type=="Query") url2<-paste0(url,"?SERVICE=WCS&VERSION=2.0.1&REQUEST=ProcessCoverages&QUERY=")
return(url2)
}
desc_url<-createWCS_URLs(type="Meta")
desc_url
d_xml <- xml2::read_xml(paste0(desc_url,coverage))
coverage=coverages[2]
coverage
d_xml <- xml2::read_xml(paste0(desc_url,coverage))
library(myCubeR)
#Script per l'elaborazione della temperatura media giornaliera a partire da dati orari "scaricati" da Rasdaman #
#Esecutore script: MZ                                                                                          #
#La procedura è¨ pensata per "girare" ogni gg con elaborazione del giorno precedente,                          #
#Nel caso l'utente voglia scegliere il giorno è necessario scommentare le prime righe dopo la definizione      #
#delle librerie.                                                                                               #
################################################################################################################
library(raster)
library(tmap)
library(RColorBrewer)
library(rgdal)
library(lubridate)
library(anytime)
library(RCurl)
#Scommentare se si vuole scegliere autonomamente il giorno
#start_date <- "20201026"
#start_date <- ymd(start_date) + hours(1)
#Stringa di base per la composizione del link da elaborare
base_string <- "http://10.10.0.28:8081/rasdaman/ows?&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage&COVERAGEID=t2m_ana&SUBSET=ansi(%22"
#Definizione temporale del periodo da elaborare (procedura in automatico), da commentare nel caso di scelta giorno dell'utente
data_inizio="2020-10-26 00:00:00"
start_date <- strptime(data_inizio, "%Y-%m-%d %H:%M:%S")
end_date <- start_date + hours(23)
#Sequenza di date da elaborare
vec_date <- seq(start_date,end_date, by = '1 hour')
print(paste(vec_date))
#Isolo il tempo e il giorno dalla stringa data e ora
time <- strftime(vec_date,format="%H:%M:%S",tz = "UTC")
day <- strftime(vec_date[1], format="%d-%m")
#Assengno il primo raster alla mia variabile che poi andrà a sommare gli altri nel ciclo - controllo di esistenza del raster
test_url <- paste(base_string,date(vec_date[1]),"T",time[1],".000Z%22)&FORMAT=image/tiff",sep = "")
print(paste("inizio:",test_url))
if (url.exists(test_url)){
rstr_finale <- raster(test_url)
} else {
print("Errore: non accedo al raster")
}
#Ciclo sommo le ore
for (i in 2:length(vec_date)){
r_link <- paste(base_string,date(vec_date[i]),"T",time[i],".000Z%22)&FORMAT=image/tiff",sep = "")
print(paste(r_link))
if(url.exists(r_link)){
rstr_finale = rstr_finale + raster(r_link)
} else {
print("Errore: non accedo al raster")
}
}
#Calcolo della temperatura media
print(length(vec_date))
writeRaster(rstr_finale, filename="C:\\WSL_folder\\tm2_ana_somma_MZ.ti", format = "GTiff", overwrite = TRUE)
rstr_finale <- rstr_finale / 24
#L'istruzione di seguito è commentata perchè permette di scrivere il raster giornaliero per uso locale
#Scrivo il raster giornaliero
name=paste0("t2m_ana_",date(vec_date[1]))
filename=paste("C:\\WSL_folder\\",name,".tif",sep = "")
writeRaster(rstr_finale, filename=filename, format = "GTiff", overwrite = TRUE)
print(paste0("Raster salvato in: ", filename))
###################################################  Esempio semplice di Elaborazione grafica del raster (tmap library) ######################################
#Creazione delle isolinee da aggiungere al grafico
rc <- rasterToContour(rstr_finale)
#Assegno il sistema di riferimento WGS84-UTM32N
proj4string(rstr_finale) <- CRS("+init=epsg:32632")
#Creo il grafico. La documentazione della libreria è disponibile qui: https://cran.r-project.org/web/packages/tmap/tmap.pdf
#install.packages("tmap")
library(tmap)
#figure=paste0("C:\\WSL_folder\\",name,".png")
#png(figure)
# make plot
tm_shape(rstr_finale) + tm_raster(style= "cont", palette = "-RdYlBu", title = paste("Tmedia del ",day,"\n (°C)"), interpolate = TRUE) +
tm_shape(rc) + tm_lines(col = "black", text = "level", breaks = rc$level, labels = as.character(rc$level)) +
tm_text("level", col = "white", size = 1.0) + tm_legend(outside = TRUE)
#close del plot and save it
#dev.off()
#END SCRIPT
library(myCubeR)
coverages=getCapability()
coverage
coverages
coverage=getCapability()[5]
coverage
axes<-coverage_get_coordsys(coverage = coverage)
axes
coverage="rh_ana"
data="2020-05-18T12:00:00.000Z"
formato="image/tiff"
r=get_coverage(coverage=coverage, DATA=data, FORMAT=formato)
r
plot(r)
coverage="rh_ana"
data="2020-05-18T12:00:00.000Z"
formato="image/tiff"
CRSext="http://localhost:8080/def/crs/EPSG/0/3003"
more="clip=POLYGON((1505230 5027450,1525230 5027450, 1525230 5047450, 1505230 5047450, 1505230 5027450))"
r3=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, CRS_Extension=CRSext, others_opt=more)
plot(r2, col='black', legend=FALSE)
plot(r3, box=FALSE, axes=FALSE, add = TRUE)
coverage="rh_ana"
data="2020-05-18T12:00:00.000Z"
formato="image/tiff"
CRSext="http://localhost:8080/def/crs/EPSG/0/3003"
more="clip=POLYGON((1505230 5027450,1525230 5027450, 1525230 5047450, 1505230 5047450, 1505230 5027450))"
r3=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, CRS_Extension=CRSext, others_opt=more)
plot(r, col='black', legend=FALSE)
plot(r3, box=FALSE, axes=FALSE, add = TRUE)
r3
plot(r3, box=FALSE, axes=FALSE, add = TRUE)
r
r3
plot(r, col='black', legend=FALSE)
plot(r3, box=FALSE, axes=FALSE, add = TRUE)
plot(r3)
coverage="rh_ana"
data="2020-05-18T12:00:00.000Z"
formato="image/tiff"
CRSext="http://localhost:8080/def/crs/EPSG/0/3003"
r2=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, CRS_Extension=CRSext)
r2
#class      : RasterLayer
#dimensions : 249, 251, 62499  (nrow, ncol, ncell)
#resolution : 1000.019, 1000.019  (x, y)
#extent     : 1436026, 1687031, 4918018, 5167023  (xmin, xmax, ymin, ymax)
#crs        : +proj=tmerc +lat_0=0 +lon_0=9 +k=0.9996 +x_0=1500000 +y_0=0 +ellps=intl +units=m +no_defs
#source     : C:/Users/sgrasso/AppData/Local/Temp/RtmpkzJWGw/file33e472e214d.tiff
#names      : file33e472e214d
plot(r2)
plot(r3, box=FALSE, axes=FALSE, add = TRUE)
coverage="rh_ana"
data="2020-05-18T12:00:00.000Z"
formato="image/jpeg"
nomefile="C:\\Users\\sgrasso\\Documents\\test.jpg"
subsetE="E(436000,550000)"
a=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, filename=nomefile, SUBSET_E=subsetE)
a
aa=raster(nomefile)
aa
plot(aa)
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-10-01T12:00:00.000Z")], "text/csv")'
valore=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
valore
coords<-as.numeric(c("515200", "5037430")) #Coordinate di Milano in EPSG 32632 (WGS84 - UTM32N)
coverage="t2m_ana"
coord_sys <- coverage_get_coordsys(coverage=coverage)
bands <- coverage_get_bands(coverage=coverage)
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date=NULL, plot = F)
P=pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date=NULL, plot = F)
P
library(stringr)
P=pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date=NULL, plot = F)
P
date <- c("2020-09-01","2020-11-01") # N.B Il giorno finale è escluso dal conteggio
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date = date, plot = TRUE)
coverage='fwi'
date <- c("2020-09-01","2020-11-01") # N.B Il giorno finale è escluso dal conteggio
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date = date, plot = TRUE)
coverages
coverage=coverages[9]
coverage
date <- c("2020-09-01","2020-11-01") # N.B Il giorno finale è escluso dal conteggio
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date = date, plot = TRUE)
coords<-as.numeric(c("1571157", "5091853"))
date <- c("2020-09-01","2020-11-01") # N.B Il giorno finale è escluso dal conteggio
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date = date, plot = TRUE)
bands
coords
date
coverage
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date=date, plot = F)
## 0. Installazione (NB! Scnnettersi dalla VPN)
#library(devtools)
#devtools::install_github("ARPASMR/myCubeR@HEAD")
## 1. Caricamento della libreria MyCubeR
library(myCubeR)
library(raster)
## 2. Connettersi alla VPN per collegarsi a Rasdaman
# Elenco delle coverage disponibili
coverages=getCapability()
coverages
#Selezione della coverage tm2_ana
coverage=getCapability()[5]
coverage
tm2_ana=coverage
#Vediamo quali sono gli estremi delle date disponibili e quali le varie date (per verificare che il dato sia orario)
temp_ext=coverage_get_temporal_extent(coverage=coverage)
temp_ext
# Scegliamo per esempio di voler fare la media giornaliera del giorno 26/10/2020
# A) Verifica. Verifichiamo che ci siano tutti i timestamps
# A1) Con "R"
data_inizio="2020-10-26 00:00:00"
data_fine="2020-10-26 23:00:00"
start.date <- strptime(data_inizio, "%Y-%m-%d %H:%M:%S")
end.date <- strptime(data_fine, "%Y-%m-%d %H:%M:%S")
a=seq(from=start.date, to=end.date, by="hour")  #length(a)
# oppure
# a=seq(from=start.date, by = "hour", length.out = 24)
date_range=format(a, "%Y-%m-%dT%H:%M:%OS3Z")
lista_completa=as.character(date_range)
all_timestamps=coverage_get_timestamps(coverage=tm2_ana)
timestamps=all_timestamps[all_timestamps%in%lista_completa]  #Timestamps presenti in quelle date
difs <- setdiff(lista_completa,timestamps)                   #Timestamp che (eventualmente) mancano in quelle date
print(paste0("[R]: Ci sono ", length(timestamps), " timestamps."))
if (!identical(difs,character(0))) print (paste0("La serie temporale disponibile non è completa! Mancano i timestamps:", difs))
#media
query2='for $c in ( t2m_ana ) return encode(
condense +
over $t ansi(imageCrsDomain($c[ansi("2020-10-26T00:00:00.000Z":"2020-10-26T23:00:00.000Z")], ansi))
using ($c[ansi($t)]/24), "tiff")'
raster_gg=WPCS_query(proper_query=query2, FORMAT="image/tiff", filename=NULL, query_url=NULL)
raster_gg
filename2="C:\\WSL_folder\\tm2_ana_gg_RASDAMAN.tiff"
writeRaster(raster_gg, filename=filename, format = "GTiff", overwrite = TRUE)
print(paste0("Raster salvato in:",filename2))
plot(raster_gg)
# make plot
rstr_finale=raster_gg
library(tmap)
#library(tmaptools)
tm_shape=tmap::tm_shape
tm_raster=tmap::tm_raster
tm_legend=tmap::tm_legend
tm_lines=tmap::tm_lines
tm_text=tmap::tm_text
tm_shape(rstr_finale) + tm_raster(style= "cont", palette = "-RdYlBu", title = paste("Tmedia del ",day,"\n (°C)")), interpolate==TRUE))++
tm_shape(rc) + tm_lines(col = "black", text = "level", breaks = rc$level, labels = as.character(rc$level)) +
tm_text("level", col = "white", size = 1.0) + tm_legend(outside = TRUE)
rstr_finale=raster_gg
library(tmap)
library(tmaptools)
tm_shape=tmap::tm_shape
tm_raster=tmap::tm_raster
tm_legend=tmap::tm_legend
tm_lines=tmap::tm_lines
tm_text=tmap::tm_text
tm_shape(rstr_finale) + tm_raster(style= "cont", palette = "-RdYlBu", title = paste("Tmedia del ",day,"\n (°C)")), interpolate==TRUE))++
tm_shape(rc) + tm_lines(col = "black", text = "level", breaks = rc$level, labels = as.character(rc$level)) +
tm_text("level", col = "white", size = 1.0) + tm_legend(outside = TRUE)
tm_shape(rstr_finale) + tm_raster(style= "cont", palette = "-RdYlBu", title = paste("Tmedia del ",day,"\n (°C)"))
tm_shape(rstr_finale) + tm_raster(style= "cont", palette = "-RdYlBu", title = paste("Tmedia del ",day,"\n (°C)")), interpolate==TRUE))+
tm_shape(rc) + tm_lines(col = "black", text = "level", breaks = rc$level, labels = as.character(rc$level)) +
tm_text("level", col = "white", size = 1.0) + tm_legend(outside = TRUE)
tm_shape(rstr_finale) + tm_raster(style= "cont", palette = "-RdYlBu", title = paste("Tmedia del ",day,"\n (°C)")), interpolate==TRUE))+
tm_shape(rc) + tm_lines(col = "black", text = "level", breaks = rc$level, labels = as.character(rc$level)) +
tm_text("level", col = "white", size = 1.0) + tm_legend(outside = TRUE)
rc <- rasterToContour(rstr_finale)
tm_shape(rstr_finale) + tm_raster(style= "cont", palette = "-RdYlBu", title = paste("Tmedia del ",day,"\n (°C)")), interpolate==TRUE))+
tm_shape(rc) + tm_lines(col = "black", text = "level", breaks = rc$level, labels = as.character(rc$level)) +
tm_text("level", col = "white", size = 1.0) + tm_legend(outside = TRUE)
proj4string(rstr_finale) <- CRS("+init=epsg:32632")
tm_shape(rstr_finale) + tm_raster(style= "cont", palette = "-RdYlBu", title = paste("Tmedia del ",day,"\n (°C)")), interpolate==TRUE))+
tm_shape(rc) + tm_lines(col = "black", text = "level", breaks = rc$level, labels = as.character(rc$level)) +
tm_text("level", col = "white", size = 1.0) + tm_legend(outside = TRUE)
rc <- rasterToContour(rstr_finale)
#Assegno il sistema di riferimento WGS84-UTM32N
proj4string(rstr_finale) <- CRS("+init=epsg:32632")
#Creo il grafico. La documentazione della libreria è disponibile qui: https://cran.r-project.org/web/packages/tmap/tmap.pdf
#install.packages("tmap")
library(tmap)
#figure=paste0("C:\\WSL_folder\\",name,".png")
#png(figure)
# make plot
tm_shape(rstr_finale) + tm_raster(style= "cont", palette = "-RdYlBu", title = paste("Tmedia del ",day,"\n (°C)"), interpolate = TRUE) +
tm_shape(rc) + tm_lines(col = "black", text = "level", breaks = rc$level, labels = as.character(rc$level)) +
tm_text("level", col = "white", size = 1.0) + tm_legend(outside = TRUE)
times<-coverage_get_timestamps(coverage=coverage)
times
start_date_mod = date[1]
end_date_mod = date[2]
start_date_mod
coverage
coverage=coverages[5]
coverage
coverage=coverages[9]
coverage
coords<-as.numeric(c("1636301.375","5016704.5"))
coords
coord_sys <- coverage_get_coordsys(coverage=coverage)
bands <- coverage_get_bands(coverage=coverage)
date <- c("2020-09-01","2020-11-01") # N.B Il giorno finale è escluso dal conteggio
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date = date, plot = TRUE)
coords<-as.numeric(c("1571157.31","5091853.1"))
date <- c("2020-09-01","2020-11-01") # N.B Il giorno finale è escluso dal conteggio
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date = date, plot = TRUE)
library(devtools)
setwd("C:\\WSL_folder\\myCubeR")
document()
library(pkgdown)
# Do i comandi per costruire il sito
#use_readme_rmd()
#use_news_md()
use_vignette("myCubeR")
build_site()
pkgdown::build_articles()
