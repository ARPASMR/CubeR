q()
install.packages("C:\Users\sgrasso\OneDrive - ARPA della Lombardia\RASDAMAN\prove_R\CubeR-mattia6690-prova.zip", repos = NULL, type = "source")
install.packages("C:\\Users\\sgrasso\\OneDrive - ARPA della Lombardia\\RASDAMAN\\prove_R\\CubeR-mattia6690-prova.zip", repos = NULL, type = "source")
library(devtools)
install.packages("C:\\Users\\sgrasso\\OneDrive - ARPA della Lombardia\\RASDAMAN\\prove_R\\CubeR-mattia6690-prova.zip", repos = NULL, type = "source")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/CubeR-mattia6690-prova.zip", repos = NULL, type = "win.binary")
install.packages("C:\\Users\\sgrasso\\OneDrive - ARPA della Lombardia\\RASDAMAN\\prove_R\\CubeR-mattia6690-prova.zip", repos = NULL, type = "source")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "source")
library(Rtools)
devtools::find_rtools()
setRepositories(addURLs = c(CRANxtras = "https://cran.r-project.org/bin/windows/Rtools/"))
5
setRepositories(addURLs = c(CRANxtras = "https://cran.r-project.org/bin/windows/"))
devtools::find_rtools()
find.package("devtools")
install.packages("devtools")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
library(devtools)
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
library(Rtools)
find_rtools()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
library(`CubeR-master`)
library(`CubeR`)
ptm<-proc.time()
coverages<-getCapability()
coverages
detach("package:CubeR", unload = TRUE)
library(CubeR)
remove.packages("CubeR", lib="~/R/win-library/3.6")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR-master.zip", repos = NULL, type = "win.binary")
library(`CubeR`)
ptm<-proc.time()
coverages<-getCapability()
library(`CubeR-master`)
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR.zip", repos = NULL, type = "win.binary")
remove.packages("CubeR", lib="~/R/win-library/3.6")
remove.packages("CubeR")
install.packages("C:/Users/sgrasso/OneDrive - ARPA della Lombardia/RASDAMAN/prove_R/prova/CubeR.zip", repos = NULL, type = "win.binary")
library(CubeR)
library(devtools)
devtools::install_git("https://github.com/ARPASMR/myCubeR")
devtools::install_git("https://github.com/ARPASMR/myCubeR")
detach("package:CubeR", unload = TRUE)
changer(C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR, myCubeR, check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
changer("C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR", myCubeR, check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
install.packages("changer")
library(changer)
library("changer")
changer("C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR", myCubeR, check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
tempdir()
pathdir()
dirpath()
path()
path
libPaths()
changer("C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR", new_name="myCubeR", check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
library("myCubeR")
library("CubeR")
changer("C:/Users/sgrasso/Documents/R/win-library/3.6/CubeR", new_name="myCubeR", check_validity = TRUE, change_git = TRUE, run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
library("myCubeR")
library("myCubeR")
library(CubeR)
remove.packages("CubeR", lib="~/R/win-library/3.6")
library(CubeR)
detach("package:CubeR", unload = TRUE)
remove.packages("CubeR", lib="~/R/win-library/3.6")
library(devtools)
devtools::install_github("ARPASMR/myCubeR")
coverages<-getCapability()
coverage<-getCapability()[1]
library(myCubeR)
coverages<-getCapability()
coverage<-getCapability()[1]
formato="text/csv"
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-10-01")], "text/csv")'
WPCS_query(proper_query=query, formato=formato, filename=filename, query_url=NULL)
formato="image/png"
query='for c in (rh_ana) return encode(c[ansi("2020-10-01")], "image/png")'
filename="C:\\Users\\sgrasso\\Desktop\\rh_ana.png"
WPCS_query(proper_query=query, formato=formato, filename=filename, query_url=NULL)
formato="image/tiff"
query='for c in (rh_ana) return encode(c[ansi("2020-10-01")], "image/tiff")'
filename="C:\\Users\\sgrasso\\Desktop\\rh_ana.tif"
WPCS_query(proper_query=query, formato=formato, filename=filename, query_url=NULL)
coords<-c("515200", "5037430") %>% as.numeric
slice_E <- as.character(c(coords[1]-10000, coords[1]+10000))
slice_N <- as.character(c(coords[2]-10000, coords[2]+10000))
dataa="2020-10-01"
outfile="C:\\Users\\sgrasso\\Desktop\\prova_rh_ana.tiff"
library(xml2)
library(stringr)
library(myCubeR)
library(magrittr)
library(httr)
library(tiff)
coords<-c("515200", "5037430") %>% as.numeric
slice_E <- as.character(c(coords[1]-10000, coords[1]+10000))
slice_N <- as.character(c(coords[2]-10000, coords[2]+10000))
dataa="2020-10-01"
outfile="C:\\Users\\sgrasso\\Desktop\\prova_rh_ana.tiff"
image_from_coverage(coverage, slice_E, slice_N, DATA=dataa, res_eff=1, format="tiff", bands=NULL,filename=outfile, query_url=NULL)
coverage=getCapability()[1]
coverage
image_from_coverage(coverage, slice_E, slice_N, DATA=dataa, res_eff=1, format="tiff", bands=NULL,filename=outfile, query_url=NULL)
filename="C:\\Users\\sgrasso\\Desktop\\filepng.png"
require(png)
img<-readPNG(filename)
plot(1:10,ty="n")
rasterImage(img,2,2,4,4)
query='for c in (rh_ana) return encode(c[ansi("2020-10-01")], "image/jpeg")'
filename="C:\\Users\\sgrasso\\Desktop\\filepng.jpeg"
WPCS_query(proper_query=query, ext_format="jpeg", filename=filename, query_url=NULL)
library(myCubeR)
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-10-01")], "text/csv")'
valore=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
valore
valore=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
valore
query='for c in (rh_ana) return encode(avg(c[E(515200),N(5037430), ansi("2020-07-01":"2020-07-31")]), "text/csv")'
media=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
media
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-07-01":"2020-07-31")], "text/csv")'
valori=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
valori
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-10-01 12:00:00.000Z")], "text/csv")'
valore=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
valore
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-10-01T12:00:00.000Z")], "text/csv")'
valore=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
valore
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-10-01T00:00:00.000Z":"2020-10-02T00:00:00.000Z")], "text/csv")'
valori=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
valori
lenght(valori)
length(valori)
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-10-01T01:00:00.000Z":"2020-10-01T00:00:00.000Z")], "text/csv")'
valori=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
valori
query='for c in (rh_ana) return encode(c[E(515200),N(5037430), ansi("2020-10-01T01:00:00.000Z":"2020-10-02T00:00:00.000Z")], "text/csv")'
valori=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
valori
a=strsplit(valori, " ")
a
a=strsplit(valori, ",")
a
lenght(a)
length(a)
a
b=unlist(strsplit(valori, ","))
b
length(b)
query='for c in (rh_ana) return encode(avg(c[E(515200),N(5037430), ansi("2020-10-01T01:00:00.000Z":"2020-10-02T00:00:00.000Z")]), "text/csv")'
media=WPCS_query(proper_query=query, FORMAT="text/csv", filename=NULL, query_url=NULL)
media
mean(b)
c=as.numeric(b)
c
mean(c)
setwd("C:\\WSL_folder\\myCubeR")
library(pkgdown)
build_site()
coverages<-getCapability()
coverage<-getCapability()[1]
axes<-coverage_get_coordsys(coverage = coverage)
ref_sys=coverage_get_coordinate_reference(coverage=coverage)
temp_ext=coverage_get_temporal_extent(coverage=coverage)
temp_ext
bb_box=coverage_get_bounding_box(coverage=coverage)
res=coverage_get_resolution(coverage=coverage)
bands<-coverage_get_bands(coverage = coverage)
bands
time_stamp=coverage_get_timestamps(coverage=coverage)
time_stamp
lenght(time_stamp)
length(time_stamp)
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
coverages
build_site()
build_site()
coverage="rh_ana"
data="2020-05-18T12:00:00.000Z"
formato="image/tiff"
r=get_coverage(coverage=coverage, DATA=data, FORMAT=formato)
r
plot(r)
library(raster)
plot(r)
coverage="rh_ana"
data="2020-05-18T12:00:00.000Z"
formato="image/jpeg"
nomefile="C:\\Documents\\output\\test.jpg"
subsetE="E(436000,550000)"
b=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, filename=nomefile, SUBSET_E=subsetE)
nomefile="C:\\Users\\sgrasso\\Documents\\test.jpg"
b=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, filename=nomefile, SUBSET_E=subsetE)
b
library(imager)
install.packages("imager")
library(imager)
plot(b)
b
img="C:\\Users\\sgrasso\\Documents\\test.jpg"
plot(img)
img
fpath <- system.file('C:\\Users\\sgrasso\\Documents\\test.jpg',package='imager')
fpath
fpath <- system.file("C:\\Users\\sgrasso\\Documents\\test.jpg",package='imager')
fpath
parrots <- load.image(fpath)
library(devtools)
fpath <- system.file("C:\\Users\\sgrasso\\Documents\\test.jpg",package='imager')
fpath
file.path="C:\\Users\\sgrasso\\Documents\\test.jpg"
parrots <- load.image(file.path)
parrots
img <- load.image(nomefile)
plot(img)
img
build_site()
build_site()
CRSext="http://localhost:8080/def/crs/EPSG/0/3003"
r2=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, CRS_Extension=CRSext)
r2=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, CRS_Extension=CRSext)
formato="image/tiff"
r2=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, CRS_Extension=CRSext)
r
r2
plot(r2)
more="clip=POLYGON((1520000 5030000,1540000 5030000, 1540000 5060000, 1520000 5060000, 1520000 5030000))"
r3=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, CRS_Extension=CRSext, others_opt=more)
request <- paste0(desc_url,coverage,'&SUBSET=',coord_sys[1],'(%22', DATA, '%22)','&subsettingCRS=',CRS_Extension,'&FORMAT=',FORMAT)
desc_url<-createWCS_URLs(type="Get")
request <- paste0(desc_url,coverage,'&SUBSET=',coord_sys[1],'(%22', DATA, '%22)','&subsettingCRS=',CRS_Extension,'&FORMAT=',FORMAT)
coord_sys<-coverage_get_coordsys(coverage=coverage)
request <- paste0(desc_url,coverage,'&SUBSET=',coord_sys[1],'(%22', DATA, '%22)','&subsettingCRS=',CRS_Extension,'&FORMAT=',FORMAT)
request <- paste0(desc_url,coverage,'&SUBSET=',coord_sys[1],'(%22', data, '%22)','&subsettingCRS=',CRS_Extension,'&FORMAT=',FORMAT)
request <- paste0(desc_url,coverage,'&SUBSET=',coord_sys[1],'(%22', data, '%22)','&subsettingCRS=',CRSext,'&FORMAT=',FORMAT)
request <- paste0(desc_url,coverage,'&SUBSET=',coord_sys[1],'(%22', data, '%22)','&subsettingCRS=',CRSext,'&FORMAT=',formato)
request
request2=paste0(request,'&',more)
request2
o=URLencode(more)
o
request2=paste0(request,'&',o)
request2
get_coverage <- function(coverage, DATA, FORMAT, SUBSET_E=NULL, SUBSET_N=NULL, BAND=NULL, CRS_Extension=NULL, filename=NULL, others_opt=NULL)
{
if(is.null(DATA) || is.null(FORMAT)) stop('Inserire per forza i parametri DATA e FORMAT')
ext_format=filename_extension(FORMAT)
if (length(ext_format)==0) stop ('Verifica il formato inserito')
bbox=coverage_get_bounding_box(coverage=coverage)
if(is.null(CRS_Extension)) {
CRS_Extension <- CRS_Ext(coverage=coverage)
print(paste0('Messaggio informativo: Il sistema di riferimento di default è: ',CRS_Extension))
}
desc_url<-createWCS_URLs(type="Get")
coord_sys<-coverage_get_coordsys(coverage=coverage)
request <- paste0(desc_url,coverage,'&SUBSET=',coord_sys[1],'(%22', DATA, '%22)','&subsettingCRS=',CRS_Extension,'&FORMAT=',FORMAT)
# if (is.null(SUBSET_E)) SUBSET_E<-paste0('E(',bbox[1],',',bbox[2],')')
# if (is.null(SUBSET_N)) SUBSET_N<-paste0('N(',bbox[3],',',bbox[4],')')
if (!is.null(SUBSET_E)) request=paste0(request,'&SUBSET=',SUBSET_E)
if (!is.null(SUBSET_N)) request=paste0(request,'&SUBSET=',SUBSET_N)
if(!is.null(BAND)) request=paste0(ulr1,'&RANGESUBSET=',BAND)
if(!is.null(others_opt)){
more_opt=URLencode(others_opt)
request=paste0(request,'&',more_opt)
}
#print(request) #Messaggio di controllo
res <- GET(request)
imageformats=c("image/png", "image/jpeg", "image/bmp")
tmp_file=paste0(tempfile(),".",ext_format)
# text/csv format
if (FORMAT == "text/csv") {
out<- content(res, "text")
if (is.null(filename)) {
return(out)
} else {
# Save to local disk
savefile(response=res, filename=filename)
print(paste0("Risultato salvato in: ", filename))
}
# raster format
} else if (FORMAT=="image/tiff") {
savefile(response=res,filename=tmp_file)
#print(paste0("File temporaneo", tmp_file))
ras <- raster(tmp_file)
if (is.null(filename)) {
return(ras)
} else {
writeRaster(ras,filename,overwrite=TRUE)
print(paste0("Raster salvato come: ", filename))
}
#image format
} else if (FORMAT %in% imageformats){
#print("Formato immagine")
if (is.null(filename)) {
savefile(response=res,filename=tmp_file)
print(paste0("Immagine salvata nel file temporaneo: ", tmp_file))
} else {
savefile(response=res,filename=filename)
print(paste0("L'immagine è stata salvata: ", filename))
}
} else {
stop('ATTENZIONE: Formato non riconosciuto')
}
}
r3=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, CRS_Extension=CRSext, others_opt=more)
savefile <- function(response,filename){
bin <- content(response, "raw")
con <- file(filename, open = "wb")
writeBin(bin, con)
close(con)
}
CRS_Ext <- function(desc_url=NULL, coverage){
if(is.null(desc_url)) desc_url<-createWCS_URLs(type="Meta")
d_xml <- xml2::read_xml(paste0(desc_url,coverage))
sys_Id <- xml_children(d_xml) %>%
xml_children(.) %>% xml_children(.) %>% .[1] %>%
xml_attr(., "srsName") %>%
str_split(., "=") %>% unlist
if(length(sys_Id) > 2){
sys_ext <- sys_Id  %>% .[3]
} else if(length(sys_Id) > 1){
sys_ext <- sys_Id  %>% .[2]
} else {
sys_ext <- sys_Id  %>% .[1]
}
return(sys_ext)
}
filename_extension <- function(formato){
formats=c("text/csv", "image/tiff", "image/png", "image/jpeg", "image/bmp")
extensions=c("txt", "tiff", "png", "jpeg", "bmp")
i <- which(formats == formato)
return (extensions[i])
}
r3=get_coverage(coverage=coverage, DATA=data, FORMAT=formato, CRS_Extension=CRSext, others_opt=more)
res <- GET(request2)
library(httr)
res <- GET(request2)
res
savefile(response=res,filename=tmp_file)
tmp_file=paste0(tempfile(),".",ext_format)
tmp_file=paste0(tempfile(),".tiff")
savefile(response=res,filename=tmp_file)
ras <- raster(tmp_file)
r3=ras
plot(r3)
plot(r2, col='black')
plot(r3, box=FALSE, axes=FALSE, add = TRUE)
request=request2
request2
request2="http://10.10.0.28:8081/rasdaman/ows?&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage&COVERAGEID=rh_ana&SUBSET=ansi(%222020-05-18T12:00:00.000Z%22)&subsettingCRS=http://localhost:8080/def/crs/EPSG/0/3003&FORMAT=image/tiff&clip=POLYGON((1520000%205030000,1550000%205030000,%201550000%205060000,%201520000%205060000,%201520000%205030000))"
res <- GET(request2)
savefile(response=res,filename=tmp_file)
r3=ras
plot(r2, col='black')
plot(r3, box=FALSE, axes=FALSE, add = TRUE)
ras <- raster(tmp_file)
r3=ras
plot(r2, col='black')
plot(r3, box=FALSE, axes=FALSE, add = TRUE)
plot(r2, col='black', legend=FALSE)
plot(r3, box=FALSE, axes=FALSE, add = TRUE)
more="clip=POLYGON((1505230 5027450,1535230 5027450, 1535230 5047450, 1505230 5047450, 1505230 5027450))"
o=URLencode(more)
request2=paste0(request,'&',o)
o=URLencode(more)
request2=paste0(request,'&',o)
res <- GET(request2)
savefile(response=res,filename=tmp_file)
ras <- raster(tmp_file)
r4=ras
plot(r2, col='black', legend=FALSE)
plot(r4, box=FALSE, axes=FALSE, add = TRUE)
r4
request2
request="http://10.10.0.28:8081/rasdaman/ows?&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage&COVERAGEID=rh_ana&SUBSET=ansi(%222020-05-18T12:00:00.000Z%22)&subsettingCRS=http://localhost:8080/def/crs/EPSG/0/3003&FORMAT=image/tiff"
o=URLencode(more)
request2=paste0(request,'&',o)
res <- GET(request2)
savefile(response=res,filename=tmp_file)
ras <- raster(tmp_file)
r4=ras
plot(r2, col='black', legend=FALSE)
plot(r4, box=FALSE, axes=FALSE, add = TRUE)
more="clip=POLYGON((1505230 5027450,1525230 5027450, 1525230 5047450, 1505230 5047450, 1505230 5027450))"
o=URLencode(more)
request2=paste0(request,'&',o)
res <- GET(request2)
savefile(response=res,filename=tmp_file)
ras <- raster(tmp_file)
r4=ras
plot(r2, col='black', legend=FALSE)
plot(r4, box=FALSE, axes=FALSE, add = TRUE)
r4
build_site()
slice_E <- as.character(c(coords[1]-10000, coords[1]+10000))
slice_N <- as.character(c(coords[2]-10000, coords[2]+10000))
request="http://10.10.0.28:8081/rasdaman/ows?&SERVICE=WCS&VERSION=2.0.1&REQUEST=GetCoverage&COVERAGEID=rh_ana&SUBSET=ansi(%222020-05-18T12:00:00.000Z%22)&subsettingCRS=http://localhost:8080/def/crs/EPSG/0/3003&FORMAT=image/tiff"
coords<-c("515200", "5037430") %>% as.numeric
coords
slice_E <- as.character(c(coords[1]-10000, coords[1]+10000))
slice_N <- as.character(c(coords[2]-10000, coords[2]+10000))
slice_E
slice_N
coords<-c("515200", "5037430") %>% as.numeric
slice_E <- as.character(c(coords[1]-10000, coords[1]+10000))
slice_N <- as.character(c(coords[2]-10000, coords[2]+10000))
data="2020-10-01"
outfile="C:\\Users\\sgrasso\\Desktop\\prova_rh_ana.tiff"
a=image_from_coverage(coverage, slice_E, slice_N, DATA=data, bands=NULL,filename=outfile, query_url=NULL)
coord, slice_E, slice_N
coords, slice_E, slice_N
plot(a)
file.path="C:\WSL_folder\myCubeR\vignettes\test\HARV_RGB_Ortho.tif"
file.path="\\vignettes\\test\\HARV_RGB_Ortho.tif"
file.path
RGB_band1_HARV <- raster(file.path)
file.path="C:\WSL_folder\myCubeR\vignettes\test\HARV_RGB_Ortho.tif"
file.path="C:\\WSL_folder\\myCubeR\\vignettes\\test\\HARV_RGB_Ortho.tif"
RGB_band1_HARV <- raster(file.path)
RGB_band1_HARV
RGB_stack_HARV <- stack(file.path)
RGB_stack_HARV
banda1=RGB_stack_HARV[[1]]
banda1
plot(banda1)
prova=braster(RGB_stack_HARV, band = 2)
prova=raster(RGB_stack_HARV, band = 1)
banda1=raster(file.path, band = 1)
plot(banda1)
plotRGB(RGB_stack_HARV, r = 1, g = 2, b = 3)
build_site()
build_site()
build_site()
more="for $c in ( fwi ) return encode( switch case $c[ansi("2020-08-01T00:00:00.000Z")]=-9999 return {red:0; green:0; blue:0}
case $c[ansi("2020-08-01T00:00:00.000Z")]<7 return {red: 46; green: 137; blue: 50}
case $c[ansi("2020-08-01T00:00:00.000Z")]>=7 and $c[ansi("2020-08-01T00:00:00.000Z")]<10 return {red: 0; green: 255; blue: 0}
case $c[ansi("2020-08-01T00:00:00.000Z")]>=10 and $c[ansi("2020-08-01T00:00:00.000Z")]<20 return {red: 255; green: 255; blue: 0}
case $c[ansi("2020-08-01T00:00:00.000Z")]>=20 and $c[ansi("2020-08-01T00:00:00.000Z")]<40 return {red: 255; green: 127; blue: 0}
case $c[ansi("2020-08-01T00:00:00.000Z")]>=40 return {red: 255; green: 0; blue: 0}
default return {red: 255; green: 255; blue: 255}, "image/png")"
filename="C:\\Users\\sgrasso\\Documents\\fwi_20200810.png"
o=URLencode(more)
request3=paste0(request,'&',o)
res <- GET(request3)
savefile(response=res,filename=filename)
res
WPCS_query <- function(proper_query=more, FORMAT="image/png", filename=filename, query_url=NULL)
WPCS_query(proper_query=more, FORMAT="image/png", filename=filename, query_url=NULL)
WPCS_query(proper_query=more, FORMAT="image/png", filename=filename, query_url=NULL)
query_url<-createWCS_URLs(type="Query")
query_encode  <- urltools::url_encode(more)
query_encode
more='for $c in ( fwi ) return encode( switch case $c[ansi("2020-08-01T00:00:00.000Z")]=-9999 return {red:0; green:0; blue:0}
case $c[ansi("2020-08-01T00:00:00.000Z")]<7 return {red: 46; green: 137; blue: 50}
case $c[ansi("2020-08-01T00:00:00.000Z")]>=7 and $c[ansi("2020-08-01T00:00:00.000Z")]<10 return {red: 0; green: 255; blue: 0}
case $c[ansi("2020-08-01T00:00:00.000Z")]>=10 and $c[ansi("2020-08-01T00:00:00.000Z")]<20 return {red: 255; green: 255; blue: 0}
case $c[ansi("2020-08-01T00:00:00.000Z")]>=20 and $c[ansi("2020-08-01T00:00:00.000Z")]<40 return {red: 255; green: 127; blue: 0}
case $c[ansi("2020-08-01T00:00:00.000Z")]>=40 return {red: 255; green: 0; blue: 0}
default return {red: 255; green: 255; blue: 255}, "image/png")'
WPCS_query(proper_query=more, FORMAT="image/png", filename=filename, query_url=NULL)
WPCS_query(proper_query=more, FORMAT="image/png", filename=filename, query_url=NULL)
WPCS_query(proper_query=query, FORMAT=formato, filename=filename)
formato="image/png"
WPCS_query(proper_query=query, FORMAT=formato, filename=filename)
build_site()
coords<-as.numeric(c("515200", "5037430"))
coords<-as.numeric(c("515200", "5037430")) #Coordinate di Milano in EPSG 32632 (WGS84 - UTM32N)
coverage="t2m_ana"
coord_sys <- coverage_get_coordsys(coverage=coverage)
bands <- coverage_get_bands(coverage=coverage)
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date=NULL, plot = F)
stringr
library(stringr)
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date=NULL, plot = F)
date <- c("2020-09-01","2020-11-01") # N.B Il giorno finale è escluso dal conteggio
pixel_history(coverage = coverage, coord_sys = coord_sys, bands = bands, coords = coords, date = date, plot = TRUE)
build_site()
devtools::document()
